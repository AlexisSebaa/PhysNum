from scipy import zeros, empty, dot, sqrt, copy, array

def QR(A):
       
        N = A.shape[0]
        Q = empty([ N, N ], float)
        R = zeros([ N, N ], float)

        A_colonnes = []             # on créé A que l'on utilisera pour u et q
        for i in range(N):
            A_colonnes.append(A[:, i])

        def norme(x):
            return sqrt(dot(x, x))  #avec le "dot product" on exprime la norme

        u_colonnes = [ copy(A_colonnes[0]) ]     #on initialise nos vecteurs u
        q_colonnes = [ copy(A_colonnes[0]) / norme(A_colonnes[0]) ]  #et q
        
        for i in range(1, N):     #on les itère pour les calculer
            u_colonnes.append(copy(A_colonnes[i]))
            for j in range(i):
                u_colonnes[i] -= dot(q_colonnes[j], A_colonnes[i]) * q_colonnes[j]
            q_colonnes.append(u_colonnes[i] / norme(u_colonnes[i]))

        # On créé la matrice Q à partir des q
        
        for i in range(N):
            Q[:, i] = q_colonnes[i]

        # On créé la matrice R avec les u et q
        
        for i in range(N):
            for j in range(i, N):
                if i == j:
                    R[i, i] = norme(u_colonnes[i])
                else:
                    R[i, j] = dot(q_colonnes[i], A_colonnes[j])
        

        return [ Q, R ]
    
A = array([ [1, 4, 8, 4],
            [4, 2, 3, 7],
            [8, 3, 6, 9],
            [4, 7, 9, 2] ], float)
    
[Q,R] = QR(A)

print("La matrice Q est : ", Q)
print("La matrice R est : ", R)
print("Le produit QR vaut : ", dot(Q,R))
